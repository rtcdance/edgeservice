// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: edgeservice.proto

#include "edgeservice.pb.h"
#include "edgeservice.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace edgeservice {

static const char* CameraService_method_names[] = {
  "/edgeservice.CameraService/CaptureAndCheck",
  "/edgeservice.CameraService/AsyncCaptureAndCheck",
  "/edgeservice.CameraService/GetAsyncCaptureAndCheckResult",
  "/edgeservice.CameraService/GenPlayUrl",
};

std::unique_ptr< CameraService::Stub> CameraService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CameraService::Stub> stub(new CameraService::Stub(channel, options));
  return stub;
}

CameraService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CaptureAndCheck_(CameraService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AsyncCaptureAndCheck_(CameraService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAsyncCaptureAndCheckResult_(CameraService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenPlayUrl_(CameraService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CameraService::Stub::CaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::edgeservice::CaptureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgeservice::CaptureRequest, ::edgeservice::CaptureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CaptureAndCheck_, context, request, response);
}

void CameraService::Stub::async::CaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest* request, ::edgeservice::CaptureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgeservice::CaptureRequest, ::edgeservice::CaptureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureAndCheck_, context, request, response, std::move(f));
}

void CameraService::Stub::async::CaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest* request, ::edgeservice::CaptureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureAndCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgeservice::CaptureResponse>* CameraService::Stub::PrepareAsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgeservice::CaptureResponse, ::edgeservice::CaptureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CaptureAndCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgeservice::CaptureResponse>* CameraService::Stub::AsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCaptureAndCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CameraService::Stub::AsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::edgeservice::AsyncCaptureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgeservice::AsyncCaptureRequest, ::edgeservice::AsyncCaptureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AsyncCaptureAndCheck_, context, request, response);
}

void CameraService::Stub::async::AsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest* request, ::edgeservice::AsyncCaptureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgeservice::AsyncCaptureRequest, ::edgeservice::AsyncCaptureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AsyncCaptureAndCheck_, context, request, response, std::move(f));
}

void CameraService::Stub::async::AsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest* request, ::edgeservice::AsyncCaptureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AsyncCaptureAndCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgeservice::AsyncCaptureResponse>* CameraService::Stub::PrepareAsyncAsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgeservice::AsyncCaptureResponse, ::edgeservice::AsyncCaptureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AsyncCaptureAndCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgeservice::AsyncCaptureResponse>* CameraService::Stub::AsyncAsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAsyncCaptureAndCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CameraService::Stub::GetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::edgeservice::GetResultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgeservice::GetResultRequest, ::edgeservice::GetResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAsyncCaptureAndCheckResult_, context, request, response);
}

void CameraService::Stub::async::GetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest* request, ::edgeservice::GetResultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgeservice::GetResultRequest, ::edgeservice::GetResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAsyncCaptureAndCheckResult_, context, request, response, std::move(f));
}

void CameraService::Stub::async::GetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest* request, ::edgeservice::GetResultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAsyncCaptureAndCheckResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgeservice::GetResultResponse>* CameraService::Stub::PrepareAsyncGetAsyncCaptureAndCheckResultRaw(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgeservice::GetResultResponse, ::edgeservice::GetResultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAsyncCaptureAndCheckResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgeservice::GetResultResponse>* CameraService::Stub::AsyncGetAsyncCaptureAndCheckResultRaw(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAsyncCaptureAndCheckResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CameraService::Stub::GenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::edgeservice::GenPlayUrlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgeservice::GenPlayUrlRequest, ::edgeservice::GenPlayUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenPlayUrl_, context, request, response);
}

void CameraService::Stub::async::GenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest* request, ::edgeservice::GenPlayUrlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgeservice::GenPlayUrlRequest, ::edgeservice::GenPlayUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenPlayUrl_, context, request, response, std::move(f));
}

void CameraService::Stub::async::GenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest* request, ::edgeservice::GenPlayUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenPlayUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgeservice::GenPlayUrlResponse>* CameraService::Stub::PrepareAsyncGenPlayUrlRaw(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgeservice::GenPlayUrlResponse, ::edgeservice::GenPlayUrlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenPlayUrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgeservice::GenPlayUrlResponse>* CameraService::Stub::AsyncGenPlayUrlRaw(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenPlayUrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

CameraService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::edgeservice::CaptureRequest, ::edgeservice::CaptureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgeservice::CaptureRequest* req,
             ::edgeservice::CaptureResponse* resp) {
               return service->CaptureAndCheck(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::edgeservice::AsyncCaptureRequest, ::edgeservice::AsyncCaptureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgeservice::AsyncCaptureRequest* req,
             ::edgeservice::AsyncCaptureResponse* resp) {
               return service->AsyncCaptureAndCheck(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::edgeservice::GetResultRequest, ::edgeservice::GetResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgeservice::GetResultRequest* req,
             ::edgeservice::GetResultResponse* resp) {
               return service->GetAsyncCaptureAndCheckResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::edgeservice::GenPlayUrlRequest, ::edgeservice::GenPlayUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgeservice::GenPlayUrlRequest* req,
             ::edgeservice::GenPlayUrlResponse* resp) {
               return service->GenPlayUrl(ctx, req, resp);
             }, this)));
}

CameraService::Service::~Service() {
}

::grpc::Status CameraService::Service::CaptureAndCheck(::grpc::ServerContext* context, const ::edgeservice::CaptureRequest* request, ::edgeservice::CaptureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::AsyncCaptureAndCheck(::grpc::ServerContext* context, const ::edgeservice::AsyncCaptureRequest* request, ::edgeservice::AsyncCaptureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::GetAsyncCaptureAndCheckResult(::grpc::ServerContext* context, const ::edgeservice::GetResultRequest* request, ::edgeservice::GetResultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::GenPlayUrl(::grpc::ServerContext* context, const ::edgeservice::GenPlayUrlRequest* request, ::edgeservice::GenPlayUrlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace edgeservice

