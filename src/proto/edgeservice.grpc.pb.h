// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: edgeservice.proto
#ifndef GRPC_edgeservice_2eproto__INCLUDED
#define GRPC_edgeservice_2eproto__INCLUDED

#include "edgeservice.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace edgeservice {

// 单摄像头截图+AI校验
class CameraService final {
 public:
  static constexpr char const* service_full_name() {
    return "edgeservice.CameraService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 同步截图校验
    virtual ::grpc::Status CaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::edgeservice::CaptureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::CaptureResponse>> AsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::CaptureResponse>>(AsyncCaptureAndCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::CaptureResponse>> PrepareAsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::CaptureResponse>>(PrepareAsyncCaptureAndCheckRaw(context, request, cq));
    }
    // 异步批量截图校验，返回task_id
    virtual ::grpc::Status AsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::edgeservice::AsyncCaptureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::AsyncCaptureResponse>> AsyncAsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::AsyncCaptureResponse>>(AsyncAsyncCaptureAndCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::AsyncCaptureResponse>> PrepareAsyncAsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::AsyncCaptureResponse>>(PrepareAsyncAsyncCaptureAndCheckRaw(context, request, cq));
    }
    // 查询异步批量校验结果
    virtual ::grpc::Status GetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::edgeservice::GetResultResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GetResultResponse>> AsyncGetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GetResultResponse>>(AsyncGetAsyncCaptureAndCheckResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GetResultResponse>> PrepareAsyncGetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GetResultResponse>>(PrepareAsyncGetAsyncCaptureAndCheckResultRaw(context, request, cq));
    }
    // 生成播放地址
    virtual ::grpc::Status GenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::edgeservice::GenPlayUrlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GenPlayUrlResponse>> AsyncGenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GenPlayUrlResponse>>(AsyncGenPlayUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GenPlayUrlResponse>> PrepareAsyncGenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GenPlayUrlResponse>>(PrepareAsyncGenPlayUrlRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 同步截图校验
      virtual void CaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest* request, ::edgeservice::CaptureResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest* request, ::edgeservice::CaptureResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 异步批量截图校验，返回task_id
      virtual void AsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest* request, ::edgeservice::AsyncCaptureResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest* request, ::edgeservice::AsyncCaptureResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 查询异步批量校验结果
      virtual void GetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest* request, ::edgeservice::GetResultResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest* request, ::edgeservice::GetResultResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 生成播放地址
      virtual void GenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest* request, ::edgeservice::GenPlayUrlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest* request, ::edgeservice::GenPlayUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::CaptureResponse>* AsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::CaptureResponse>* PrepareAsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::AsyncCaptureResponse>* AsyncAsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::AsyncCaptureResponse>* PrepareAsyncAsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GetResultResponse>* AsyncGetAsyncCaptureAndCheckResultRaw(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GetResultResponse>* PrepareAsyncGetAsyncCaptureAndCheckResultRaw(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GenPlayUrlResponse>* AsyncGenPlayUrlRaw(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeservice::GenPlayUrlResponse>* PrepareAsyncGenPlayUrlRaw(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::edgeservice::CaptureResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::CaptureResponse>> AsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::CaptureResponse>>(AsyncCaptureAndCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::CaptureResponse>> PrepareAsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::CaptureResponse>>(PrepareAsyncCaptureAndCheckRaw(context, request, cq));
    }
    ::grpc::Status AsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::edgeservice::AsyncCaptureResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::AsyncCaptureResponse>> AsyncAsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::AsyncCaptureResponse>>(AsyncAsyncCaptureAndCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::AsyncCaptureResponse>> PrepareAsyncAsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::AsyncCaptureResponse>>(PrepareAsyncAsyncCaptureAndCheckRaw(context, request, cq));
    }
    ::grpc::Status GetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::edgeservice::GetResultResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::GetResultResponse>> AsyncGetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::GetResultResponse>>(AsyncGetAsyncCaptureAndCheckResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::GetResultResponse>> PrepareAsyncGetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::GetResultResponse>>(PrepareAsyncGetAsyncCaptureAndCheckResultRaw(context, request, cq));
    }
    ::grpc::Status GenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::edgeservice::GenPlayUrlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::GenPlayUrlResponse>> AsyncGenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::GenPlayUrlResponse>>(AsyncGenPlayUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::GenPlayUrlResponse>> PrepareAsyncGenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeservice::GenPlayUrlResponse>>(PrepareAsyncGenPlayUrlRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest* request, ::edgeservice::CaptureResponse* response, std::function<void(::grpc::Status)>) override;
      void CaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest* request, ::edgeservice::CaptureResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest* request, ::edgeservice::AsyncCaptureResponse* response, std::function<void(::grpc::Status)>) override;
      void AsyncCaptureAndCheck(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest* request, ::edgeservice::AsyncCaptureResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest* request, ::edgeservice::GetResultResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAsyncCaptureAndCheckResult(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest* request, ::edgeservice::GetResultResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest* request, ::edgeservice::GenPlayUrlResponse* response, std::function<void(::grpc::Status)>) override;
      void GenPlayUrl(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest* request, ::edgeservice::GenPlayUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::edgeservice::CaptureResponse>* AsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgeservice::CaptureResponse>* PrepareAsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgeservice::AsyncCaptureResponse>* AsyncAsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgeservice::AsyncCaptureResponse>* PrepareAsyncAsyncCaptureAndCheckRaw(::grpc::ClientContext* context, const ::edgeservice::AsyncCaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgeservice::GetResultResponse>* AsyncGetAsyncCaptureAndCheckResultRaw(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgeservice::GetResultResponse>* PrepareAsyncGetAsyncCaptureAndCheckResultRaw(::grpc::ClientContext* context, const ::edgeservice::GetResultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgeservice::GenPlayUrlResponse>* AsyncGenPlayUrlRaw(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgeservice::GenPlayUrlResponse>* PrepareAsyncGenPlayUrlRaw(::grpc::ClientContext* context, const ::edgeservice::GenPlayUrlRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CaptureAndCheck_;
    const ::grpc::internal::RpcMethod rpcmethod_AsyncCaptureAndCheck_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAsyncCaptureAndCheckResult_;
    const ::grpc::internal::RpcMethod rpcmethod_GenPlayUrl_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 同步截图校验
    virtual ::grpc::Status CaptureAndCheck(::grpc::ServerContext* context, const ::edgeservice::CaptureRequest* request, ::edgeservice::CaptureResponse* response);
    // 异步批量截图校验，返回task_id
    virtual ::grpc::Status AsyncCaptureAndCheck(::grpc::ServerContext* context, const ::edgeservice::AsyncCaptureRequest* request, ::edgeservice::AsyncCaptureResponse* response);
    // 查询异步批量校验结果
    virtual ::grpc::Status GetAsyncCaptureAndCheckResult(::grpc::ServerContext* context, const ::edgeservice::GetResultRequest* request, ::edgeservice::GetResultResponse* response);
    // 生成播放地址
    virtual ::grpc::Status GenPlayUrl(::grpc::ServerContext* context, const ::edgeservice::GenPlayUrlRequest* request, ::edgeservice::GenPlayUrlResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CaptureAndCheck() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::CaptureRequest* /*request*/, ::edgeservice::CaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureAndCheck(::grpc::ServerContext* context, ::edgeservice::CaptureRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgeservice::CaptureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AsyncCaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AsyncCaptureAndCheck() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AsyncCaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AsyncCaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::AsyncCaptureRequest* /*request*/, ::edgeservice::AsyncCaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAsyncCaptureAndCheck(::grpc::ServerContext* context, ::edgeservice::AsyncCaptureRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgeservice::AsyncCaptureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAsyncCaptureAndCheckResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAsyncCaptureAndCheckResult() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAsyncCaptureAndCheckResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAsyncCaptureAndCheckResult(::grpc::ServerContext* /*context*/, const ::edgeservice::GetResultRequest* /*request*/, ::edgeservice::GetResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAsyncCaptureAndCheckResult(::grpc::ServerContext* context, ::edgeservice::GetResultRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgeservice::GetResultResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenPlayUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenPlayUrl() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GenPlayUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenPlayUrl(::grpc::ServerContext* /*context*/, const ::edgeservice::GenPlayUrlRequest* /*request*/, ::edgeservice::GenPlayUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenPlayUrl(::grpc::ServerContext* context, ::edgeservice::GenPlayUrlRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgeservice::GenPlayUrlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CaptureAndCheck<WithAsyncMethod_AsyncCaptureAndCheck<WithAsyncMethod_GetAsyncCaptureAndCheckResult<WithAsyncMethod_GenPlayUrl<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CaptureAndCheck() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::edgeservice::CaptureRequest, ::edgeservice::CaptureResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::edgeservice::CaptureRequest* request, ::edgeservice::CaptureResponse* response) { return this->CaptureAndCheck(context, request, response); }));}
    void SetMessageAllocatorFor_CaptureAndCheck(
        ::grpc::MessageAllocator< ::edgeservice::CaptureRequest, ::edgeservice::CaptureResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgeservice::CaptureRequest, ::edgeservice::CaptureResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::CaptureRequest* /*request*/, ::edgeservice::CaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureAndCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::edgeservice::CaptureRequest* /*request*/, ::edgeservice::CaptureResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AsyncCaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AsyncCaptureAndCheck() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::edgeservice::AsyncCaptureRequest, ::edgeservice::AsyncCaptureResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::edgeservice::AsyncCaptureRequest* request, ::edgeservice::AsyncCaptureResponse* response) { return this->AsyncCaptureAndCheck(context, request, response); }));}
    void SetMessageAllocatorFor_AsyncCaptureAndCheck(
        ::grpc::MessageAllocator< ::edgeservice::AsyncCaptureRequest, ::edgeservice::AsyncCaptureResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgeservice::AsyncCaptureRequest, ::edgeservice::AsyncCaptureResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AsyncCaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AsyncCaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::AsyncCaptureRequest* /*request*/, ::edgeservice::AsyncCaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AsyncCaptureAndCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::edgeservice::AsyncCaptureRequest* /*request*/, ::edgeservice::AsyncCaptureResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAsyncCaptureAndCheckResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAsyncCaptureAndCheckResult() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::edgeservice::GetResultRequest, ::edgeservice::GetResultResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::edgeservice::GetResultRequest* request, ::edgeservice::GetResultResponse* response) { return this->GetAsyncCaptureAndCheckResult(context, request, response); }));}
    void SetMessageAllocatorFor_GetAsyncCaptureAndCheckResult(
        ::grpc::MessageAllocator< ::edgeservice::GetResultRequest, ::edgeservice::GetResultResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgeservice::GetResultRequest, ::edgeservice::GetResultResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAsyncCaptureAndCheckResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAsyncCaptureAndCheckResult(::grpc::ServerContext* /*context*/, const ::edgeservice::GetResultRequest* /*request*/, ::edgeservice::GetResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAsyncCaptureAndCheckResult(
      ::grpc::CallbackServerContext* /*context*/, const ::edgeservice::GetResultRequest* /*request*/, ::edgeservice::GetResultResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenPlayUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenPlayUrl() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::edgeservice::GenPlayUrlRequest, ::edgeservice::GenPlayUrlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::edgeservice::GenPlayUrlRequest* request, ::edgeservice::GenPlayUrlResponse* response) { return this->GenPlayUrl(context, request, response); }));}
    void SetMessageAllocatorFor_GenPlayUrl(
        ::grpc::MessageAllocator< ::edgeservice::GenPlayUrlRequest, ::edgeservice::GenPlayUrlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgeservice::GenPlayUrlRequest, ::edgeservice::GenPlayUrlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GenPlayUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenPlayUrl(::grpc::ServerContext* /*context*/, const ::edgeservice::GenPlayUrlRequest* /*request*/, ::edgeservice::GenPlayUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenPlayUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::edgeservice::GenPlayUrlRequest* /*request*/, ::edgeservice::GenPlayUrlResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CaptureAndCheck<WithCallbackMethod_AsyncCaptureAndCheck<WithCallbackMethod_GetAsyncCaptureAndCheckResult<WithCallbackMethod_GenPlayUrl<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CaptureAndCheck() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::CaptureRequest* /*request*/, ::edgeservice::CaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AsyncCaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AsyncCaptureAndCheck() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AsyncCaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AsyncCaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::AsyncCaptureRequest* /*request*/, ::edgeservice::AsyncCaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAsyncCaptureAndCheckResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAsyncCaptureAndCheckResult() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAsyncCaptureAndCheckResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAsyncCaptureAndCheckResult(::grpc::ServerContext* /*context*/, const ::edgeservice::GetResultRequest* /*request*/, ::edgeservice::GetResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenPlayUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenPlayUrl() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GenPlayUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenPlayUrl(::grpc::ServerContext* /*context*/, const ::edgeservice::GenPlayUrlRequest* /*request*/, ::edgeservice::GenPlayUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CaptureAndCheck() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::CaptureRequest* /*request*/, ::edgeservice::CaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureAndCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AsyncCaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AsyncCaptureAndCheck() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AsyncCaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AsyncCaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::AsyncCaptureRequest* /*request*/, ::edgeservice::AsyncCaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAsyncCaptureAndCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAsyncCaptureAndCheckResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAsyncCaptureAndCheckResult() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAsyncCaptureAndCheckResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAsyncCaptureAndCheckResult(::grpc::ServerContext* /*context*/, const ::edgeservice::GetResultRequest* /*request*/, ::edgeservice::GetResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAsyncCaptureAndCheckResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenPlayUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenPlayUrl() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GenPlayUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenPlayUrl(::grpc::ServerContext* /*context*/, const ::edgeservice::GenPlayUrlRequest* /*request*/, ::edgeservice::GenPlayUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenPlayUrl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CaptureAndCheck() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CaptureAndCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_CaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::CaptureRequest* /*request*/, ::edgeservice::CaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureAndCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AsyncCaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AsyncCaptureAndCheck() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AsyncCaptureAndCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_AsyncCaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AsyncCaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::AsyncCaptureRequest* /*request*/, ::edgeservice::AsyncCaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AsyncCaptureAndCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAsyncCaptureAndCheckResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAsyncCaptureAndCheckResult() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAsyncCaptureAndCheckResult(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAsyncCaptureAndCheckResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAsyncCaptureAndCheckResult(::grpc::ServerContext* /*context*/, const ::edgeservice::GetResultRequest* /*request*/, ::edgeservice::GetResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAsyncCaptureAndCheckResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenPlayUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenPlayUrl() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenPlayUrl(context, request, response); }));
    }
    ~WithRawCallbackMethod_GenPlayUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenPlayUrl(::grpc::ServerContext* /*context*/, const ::edgeservice::GenPlayUrlRequest* /*request*/, ::edgeservice::GenPlayUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenPlayUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CaptureAndCheck() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgeservice::CaptureRequest, ::edgeservice::CaptureResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgeservice::CaptureRequest, ::edgeservice::CaptureResponse>* streamer) {
                       return this->StreamedCaptureAndCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::CaptureRequest* /*request*/, ::edgeservice::CaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCaptureAndCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgeservice::CaptureRequest,::edgeservice::CaptureResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AsyncCaptureAndCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AsyncCaptureAndCheck() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgeservice::AsyncCaptureRequest, ::edgeservice::AsyncCaptureResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgeservice::AsyncCaptureRequest, ::edgeservice::AsyncCaptureResponse>* streamer) {
                       return this->StreamedAsyncCaptureAndCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AsyncCaptureAndCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AsyncCaptureAndCheck(::grpc::ServerContext* /*context*/, const ::edgeservice::AsyncCaptureRequest* /*request*/, ::edgeservice::AsyncCaptureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAsyncCaptureAndCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgeservice::AsyncCaptureRequest,::edgeservice::AsyncCaptureResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAsyncCaptureAndCheckResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAsyncCaptureAndCheckResult() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgeservice::GetResultRequest, ::edgeservice::GetResultResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgeservice::GetResultRequest, ::edgeservice::GetResultResponse>* streamer) {
                       return this->StreamedGetAsyncCaptureAndCheckResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAsyncCaptureAndCheckResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAsyncCaptureAndCheckResult(::grpc::ServerContext* /*context*/, const ::edgeservice::GetResultRequest* /*request*/, ::edgeservice::GetResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAsyncCaptureAndCheckResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgeservice::GetResultRequest,::edgeservice::GetResultResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenPlayUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenPlayUrl() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgeservice::GenPlayUrlRequest, ::edgeservice::GenPlayUrlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgeservice::GenPlayUrlRequest, ::edgeservice::GenPlayUrlResponse>* streamer) {
                       return this->StreamedGenPlayUrl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenPlayUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenPlayUrl(::grpc::ServerContext* /*context*/, const ::edgeservice::GenPlayUrlRequest* /*request*/, ::edgeservice::GenPlayUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenPlayUrl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgeservice::GenPlayUrlRequest,::edgeservice::GenPlayUrlResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CaptureAndCheck<WithStreamedUnaryMethod_AsyncCaptureAndCheck<WithStreamedUnaryMethod_GetAsyncCaptureAndCheckResult<WithStreamedUnaryMethod_GenPlayUrl<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CaptureAndCheck<WithStreamedUnaryMethod_AsyncCaptureAndCheck<WithStreamedUnaryMethod_GetAsyncCaptureAndCheckResult<WithStreamedUnaryMethod_GenPlayUrl<Service > > > > StreamedService;
};

}  // namespace edgeservice


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_edgeservice_2eproto__INCLUDED
